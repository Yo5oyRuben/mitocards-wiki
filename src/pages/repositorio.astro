---
/**
 * Repositorio de Mazos
 * - Lee todos los JSON de /src/data/mazos/*.json (build-time)
 * - Cruza ids con /src/data/cards.json para calcular xenoTotal y mostrar miniaturas
 * - Lista vertical: encabezado arriba; abajo, miniaturas (izq.) + descripción (dcha.)
 */
import "../styles/globals.css";
import cards from "../data/cards.json";

// 1) Cargar todos los mazos del repositorio
const modules = import.meta.glob("../data/mazos/*.json", { eager: true, import: "default" }) as Record<string, any>;

// 2) Índices rápidos de cartas por id normalizado
const norm = (v: any) => String(v ?? "").trim().toLowerCase();
const abs = (p: any) => (typeof p === "string" && p && !p.startsWith("/")) ? "/" + p.replace(/^(\.\/)?/, "") : p;
const byId = new Map(cards.map((c: any) => [norm(c.id ?? c.slug ?? c.nombre ?? c.name), c]));

// 3) Normalizar y validar cada mazo
type Deck = {
  file: string;
  nombre: string;
  xenoMax: number;
  huecosMax: number;
  ids: string[];
  descripcion: string;
  xenoTotal: number;
  cards: any[];
};

const decks: Deck[] = Object.entries(modules)
  .map(([file, raw]) => {
    const nombre     = String(raw?.nombre ?? file.split("/").pop()?.replace(/\.json$/,"") ?? "Mazo");
    const xenoMax    = Number(raw?.xenoMax ?? 0);
    const huecosMax  = Number(raw?.huecosMax ?? 0);
    const ids        = Array.isArray(raw?.ids) ? raw.ids.map(norm) : [];
    const descripcion= String(raw?.descripcion ?? raw?.description ?? "");
    const cardsInDeck= ids.map((id: string) => byId.get(id)).filter(Boolean);
    const xenoTotal  = cardsInDeck.reduce((a: number, c: any) => a + Number(c?.xeno ?? 0), 0);

    return { file, nombre, xenoMax, huecosMax, ids, descripcion, xenoTotal, cards: cardsInDeck } as Deck;
  })
  // Un mazo "válido" aquí = tiene ids y límites numéricos. La validez estricta ya la aplica el constructor. :contentReference[oaicite:1]{index=1}
  .filter(d => d.ids.length > 0 && Number.isFinite(d.xenoMax) && Number.isFinite(d.huecosMax))
  // Orden opcional: por fecha de nombre de archivo o alfabético de nombre
  .sort((a, b) => a.nombre.localeCompare(b.nombre, "es"));

const TITLE = "Repositorio de Mazos";
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <title>{TITLE}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style is:global>
      :root {
        --bg:#0e0f12; --fg:#eaeaea; --muted:#a0a0a0;
        --card-bg:#161922; --tile:#1a1d27; --ring:#3a4b67;
      }
      body{background:var(--bg);color:var(--fg);font-family:system-ui,Segoe UI,Roboto,Ubuntu,sans-serif}
      h1{font-weight:800;letter-spacing:.3px;margin:24px 16px 8px}
      .container{padding:0 16px 24px;max-width:1200px;margin:0 auto}

      /* Fila de mazo */
      .deck{border:1px solid #2a2a33;background:var(--card-bg);border-radius:16px;padding:14px;margin:14px 0}
      .deck h2{margin:0 0 10px;font-size:1.2rem;letter-spacing:.5px}
      .deck h2 .title{font-weight:900; text-transform:uppercase}
      .deck h2 .meta{font-weight:700;opacity:.9;margin-left:10px}

      .deck-row{display:grid;grid-template-columns:1.2fr 0.8fr;gap:14px;align-items:start}
      @media (max-width: 900px){ .deck-row{grid-template-columns:1fr} }

      /* Miniaturas (imitando los slots del constructor pero más compacto) */
      .thumbs{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:8px}
      @media (max-width:1200px){ .thumbs{grid-template-columns:repeat(3,minmax(0,1fr))} }
      @media (max-width:640px){ .thumbs{grid-template-columns:repeat(2,minmax(0,1fr))} }

      .thumb{position:relative;background:var(--tile);border:1px solid #2a2a33;border-radius:12px;overflow:hidden}
      .thumb img{width:100%;height:auto;aspect-ratio:4/3;object-fit:cover;display:block}
      .thumb .meta{position:absolute;left:8px;right:8px;bottom:8px;display:flex;justify-content:space-between;align-items:flex-end;font-weight:700}
      .thumb .name-badge{background:rgba(0,0,0,.65);color:#fff;font-weight:600;font-size:.9rem;padding:3px 6px;border-radius:8px;max-width:70%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}
      .thumb .chip{background:#2a2f3a;color:#eaeaea;padding:3px 6px;border-radius:999px;font-weight:700;font-size:.9rem}

      /* Descripción */
      .desc{border:1px solid #2a2a33;background:rgba(255,255,255,0.04);border-radius:12px;padding:12px;line-height:1.55;min-height:120px;white-space:pre-wrap}
      .desc.empty{opacity:.6; font-style:italic}
      nav.back{margin:0 16px 8px}
      .back a{display:inline-block;padding:8px 12px;border-radius:10px;border:1px solid #3a3f4a;background:#2a2f3a;color:var(--fg);text-decoration:none}
    </style>
  </head>
  <body>
    <nav class="back">
      <a href="/" class="back-btn">Volver al menú</a>
    </nav>

    <h1>{TITLE}</h1>
    <div class="container">
      {decks.length === 0 ? (
        <p>No se han encontrado mazos en <code>/src/data/mazos/</code>.</p>
      ) : (
        decks.map((d) => (
          <section class="deck">
            <h2>
              <span class="title">{d.nombre}</span>
              <span class="meta">· Xeno {d.xenoTotal}/{d.xenoMax} · Huecos {d.huecosMax}</span>
            </h2>

            <div class="deck-row">
              {/* Miniaturas izquierda */}
              <div class="thumbs">
                {d.cards.map((c) => {
                  const nombre = c?.nombre ?? c?.name ?? c?.id ?? "¿?";
                  const img = abs(c?.ilustracion ?? c?.ilustracion_carta ?? "/img/placeholder-card.png");
                  const xeno = Number(c?.xeno ?? 0);
                  const id = norm(c?.id ?? c?.slug ?? c?.nombre ?? c?.name);
                  return (
                    <a class="thumb" href={`/cartas/${id}/?from=repositorio`} title={nombre}>
                      <img src={img} alt={`Carta de ${nombre}`} loading="lazy" decoding="async" fetchpriority="low"
                           width="480" height="360"
                           sizes="(max-width:1200px) 33vw, (max-width:820px) 50vw, 25vw"
                           onerror="this.onerror=null;this.src='/img/placeholder-card.png'"/>
                      <div class="meta">
                        <span class="name-badge">{nombre}</span>
                        <span class="chip">{xeno}</span>
                      </div>
                    </a>
                  );
                })}
              </div>

              {/* Descripción derecha */}
              <div class={["desc", d.descripcion.trim() ? "" : "empty"].join(" ")}>
                {d.descripcion.trim() ? d.descripcion : "Sin descripción."}
              </div>
            </div>
          </section>
        ))
      )}
    </div>
  </body>
</html>
